type Cursor {
  current: CursorID
  take: Int!
  total: Int!
}

scalar CursorID

scalar Date

type Event {
  category: EventCategory!
  description: String
  endDate: Date!
  participants(
    currentPage: Int = 1
    cursor: CursorID

    """Max 50, Min 1"""
    take: Int = 10
    targetPage: Int
  ): UserConnection!
  price: Float!
  startDate: Date!
  title: String!
}

type EventCategory {
  name: String!
  uuid: String!
}

type EventConnection {
  cursor: Cursor!
  edges: [EventNode!]!
  pageInfo: PageInfo!
}

type EventNode {
  cursor: CursorID!
  node: Event!
}

type Mutation {
  createEvent(categoriesUuid: String!, description: String, endDate: Date, price: Float, startDate: Date!, title: String!): Event!
  deleteEvent(uuid: String!): Event!
  deleteUser(uuid: String!): User!

  """Pay to join the event"""
  joinEvent(uuid: String!): Event! @deprecated(reason: "Not implemented yet")
  login(email: String!, password: String!): UserAuth!
  register(email: String!, password: String!, username: String!): UserAuth!
  updateEvent(categoriesUuid: String, description: String, endDate: Date, price: Float, startDate: Date, title: String, uuid: String!): Event!
  updateUser(displayName: String!, email: String, password: String, roles: [Role!], username: String, uuid: String!): User!
}

type PageInfo {
  currentPage: Int!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  totalPages: Int!
}

type Query {
  event(uuid: String!): Event!
  eventCategories: [EventCategory!]!
  eventParticipants(
    currentPage: Int = 1
    cursor: CursorID
    eventUuid: String!

    """Max 50, Min 1"""
    take: Int = 10
    targetPage: Int
  ): UserConnection!
  events(
    currentPage: Int = 1
    cursor: CursorID

    """Max 50, Min 1"""
    take: Int = 10
    targetPage: Int
  ): EventConnection!
  isAlive: Boolean!
  ping: String!
  user(id: String!): User

  """Get connected user informations"""
  user_infos: User!
  users(
    currentPage: Int = 1
    cursor: CursorID

    """Max 50, Min 1"""
    take: Int = 10
    targetPage: Int
  ): UserConnection!
}

enum Role {
  ADMIN
  DEV
}

type Success {
  success: Boolean!
}

type User {
  displayName: String!
  email: String!
  joinedEvents: [Event!]!
  roles: [Role!]!
  username: String!
  uuid: String!
}

type UserAuth {
  jwt: String!
  user: User!
}

type UserConnection {
  cursor: Cursor!
  edges: [UserNode!]!
  pageInfo: PageInfo!
}

type UserNode {
  cursor: CursorID!
  node: User!
}
