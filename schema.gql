scalar Date

type Mutation {
  deleteUser(uuid: String!): User!
  login(password: String!, username: String!): User!
  logout: Success!
  register(email: String!, password: String!, username: String!): User!
  updateUser(displayName: String!, email: String, password: String, roles: [Role!], username: String, uuid: String!): User!
}

interface Node {
  id: ID!
}

type Query {
  isAlive: Boolean!
  listOfIDs: [ID!]!
  node(id: ID!): Node
  nodes(ids: [ID!]!): [Node]!
  ping: String!
  singleID: ID!

  """Get connected user informations"""
  user_infos: User!
}

enum Role {
  ADMIN
  DEV
}

type Success {
  success: Boolean!
}

type User implements Node {
  displayName: String!
  email: String
  id: ID!
  roles: [Role!]!
  username: String
  uuid: String!
}
