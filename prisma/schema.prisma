// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin", "debian-openssl-1.1.x"]
}

model User {
  uuid             String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email            String     @unique
  displayName      String
  password         String?
  createdAt        DateTime   @default(now()) @db.Timestamptz
  updatedAt        DateTime   @default(now()) @updatedAt @db.Timestamptz
  stripeCustomerId String?
  provider         Provider?
  providerId       String?
  roles            RoleEnum[]
  bookings         Booking[]

  @@unique([provider, providerId])
}

enum Provider {
  GOOGLE
  FACEBOOK
}

model Event {
  uuid                String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title               String
  category            EventCategories @relation(fields: [eventCategoriesUuid], references: [uuid])
  eventCategoriesUuid String          @db.Uuid
  startDate           DateTime        @db.Timestamptz
  endDate             DateTime?       @db.Timestamptz
  description         String?
  deletedAt           DateTime?       @db.Timestamptz
  prices              EventPrices[]
  nbPlaces            Int             @default(0)
  stripeProductId     String
}

model EventPrices {
  uuid          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  event         Event     @relation(fields: [eventUuid], references: [uuid])
  description   String
  amount        Float
  createdAt     DateTime  @default(now()) @db.Timestamptz
  updatedAt     DateTime  @default(now()) @updatedAt @db.Timestamptz
  eventUuid     String    @db.Uuid
  bookings      Booking[]
  stripePriceId String
}

model EventCategories {
  uuid      String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String
  events    Event[]
  deletedAt DateTime? @db.Timestamptz
}

model Booking {
  uuid       String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  eventPrice EventPrices @relation(fields: [eventPriceUuid], references: [uuid])
  user       User        @relation(fields: [userUuid], references: [uuid])
  refunded   Boolean     @default(false)
  refundedAt DateTime?   @db.Timestamptz

  eventPriceUuid String @db.Uuid
  userUuid       String @db.Uuid
}

enum RoleEnum {
  ADMIN
}
